using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;

namespace SASTTest.EF;

public partial class VulnerabilityBuffetContext : IdentityDbContext
{
    public VulnerabilityBuffetContext()
    {
    }

    public VulnerabilityBuffetContext(DbContextOptions<VulnerabilityBuffetContext> options)
        : base(options)
    {
    }

    //public virtual DbSet<ApplicationLog> ApplicationLogs { get; set; }

    //public virtual DbSet<AspNetRole> AspNetRoles { get; set; }

    //public virtual DbSet<AspNetRoleClaim> AspNetRoleClaims { get; set; }

    //public virtual DbSet<AspNetUser> AspNetUsers { get; set; }

    //public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }

    //public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }

    //public virtual DbSet<AspNetUserToken> AspNetUserTokens { get; set; }

    public virtual DbSet<Food> Foods { get; set; }

    public virtual DbSet<FoodDisplayView> FoodDisplayViews { get; set; }

    public virtual DbSet<FoodGroup> FoodGroups { get; set; }

    public virtual DbSet<NutritionFacts_Raw> NutritionFacts_Raws { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<OrderDetail> OrderDetails { get; set; }

    public virtual DbSet<SiteUser> SiteUsers { get; set; }

    public virtual DbSet<UnsafeFile> UnsafeFiles { get; set; }

    public virtual DbSet<UserFile> UserFiles { get; set; }

    public virtual DbSet<UserPersonalInformation> UserPersonalInformations { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer("name=DefaultConnection");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<ApplicationLog>(entity =>
        {
            entity.ToTable("ApplicationLog");

            entity.Property(e => e.DateLogged).HasColumnType("datetime");
            entity.Property(e => e.LogLevel).HasMaxLength(20);
        });

        //modelBuilder.Entity<AspNetRole>(entity =>
        //{
        //    entity.Property(e => e.Name).HasMaxLength(256);
        //    entity.Property(e => e.NormalizedName).HasMaxLength(256);
        //});

        //modelBuilder.Entity<AspNetRoleClaim>(entity =>
        //{
        //    entity.Property(e => e.RoleId).HasMaxLength(450);

        //    entity.HasOne(d => d.Role).WithMany(p => p.AspNetRoleClaims).HasForeignKey(d => d.RoleId);
        //});

        //modelBuilder.Entity<AspNetUser>(entity =>
        //{
        //    entity.Property(e => e.Email).HasMaxLength(256);
        //    entity.Property(e => e.NormalizedEmail).HasMaxLength(256);
        //    entity.Property(e => e.NormalizedUserName).HasMaxLength(256);
        //    entity.Property(e => e.UserName).HasMaxLength(256);

        //    entity.HasMany(d => d.Roles).WithMany(p => p.Users)
        //        .UsingEntity<Dictionary<string, object>>(
        //            "AspNetUserRole",
        //            r => r.HasOne<AspNetRole>().WithMany().HasForeignKey("RoleId"),
        //            l => l.HasOne<AspNetUser>().WithMany().HasForeignKey("UserId"),
        //            j =>
        //            {
        //                j.HasKey("UserId", "RoleId");
        //                j.ToTable("AspNetUserRoles");
        //            });
        //});

        //modelBuilder.Entity<AspNetUserClaim>(entity =>
        //{
        //    entity.Property(e => e.UserId).HasMaxLength(450);

        //    entity.HasOne(d => d.User).WithMany(p => p.AspNetUserClaims).HasForeignKey(d => d.UserId);
        //});

        //modelBuilder.Entity<AspNetUserLogin>(entity =>
        //{
        //    entity.HasKey(e => new { e.LoginProvider, e.ProviderKey });

        //    entity.Property(e => e.LoginProvider).HasMaxLength(128);
        //    entity.Property(e => e.ProviderKey).HasMaxLength(128);
        //    entity.Property(e => e.UserId).HasMaxLength(450);

        //    entity.HasOne(d => d.User).WithMany(p => p.AspNetUserLogins).HasForeignKey(d => d.UserId);
        //});

        //modelBuilder.Entity<AspNetUserToken>(entity =>
        //{
        //    entity.HasKey(e => new { e.UserId, e.LoginProvider, e.Name });

        //    entity.Property(e => e.LoginProvider).HasMaxLength(128);
        //    entity.Property(e => e.Name).HasMaxLength(128);

        //    entity.HasOne(d => d.User).WithMany(p => p.AspNetUserTokens).HasForeignKey(d => d.UserId);
        //});

        modelBuilder.Entity<Food>(entity =>
        {
            entity.ToTable("Food");

            entity.Property(e => e.FoodID).ValueGeneratedNever();
            entity.Property(e => e.FoodName).HasMaxLength(200);

            entity.HasOne(d => d.FoodGroup).WithMany(p => p.Foods)
                .HasForeignKey(d => d.FoodGroupID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Food_FoodGroup");
        });

        modelBuilder.Entity<FoodDisplayView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("FoodDisplayView");

            entity.Property(e => e.FoodGroup).HasMaxLength(100);
            entity.Property(e => e.FoodName).HasMaxLength(200);
        });

        modelBuilder.Entity<FoodGroup>(entity =>
        {
            entity.ToTable("FoodGroup");

            entity.Property(e => e.FoodGroupText).HasMaxLength(100);
        });

        modelBuilder.Entity<NutritionFacts_Raw>(entity =>
        {
            entity.HasKey(e => e.Database_Number).HasName("PK_NutritionFacts");

            entity.ToTable("NutritionFacts_Raw");

            entity.Property(e => e.Database_Number).ValueGeneratedNever();
            entity.Property(e => e.Fluoride_mcg).HasMaxLength(50);
            entity.Property(e => e.Food_Group).HasMaxLength(50);
            entity.Property(e => e.Food_Name).HasMaxLength(150);
            entity.Property(e => e.Fructose_g).HasMaxLength(50);
            entity.Property(e => e.Galactose_g).HasMaxLength(50);
            entity.Property(e => e.Glucose_g).HasMaxLength(50);
            entity.Property(e => e.Lactose_g).HasMaxLength(50);
            entity.Property(e => e.Maltose_g).HasMaxLength(50);
            entity.Property(e => e.Starch_g).HasMaxLength(50);
            entity.Property(e => e.Sucrose_g).HasMaxLength(50);
            entity.Property(e => e.Vitamin_D2_Ergocalciferol_mcg).HasMaxLength(50);
            entity.Property(e => e.Vitamin_D3_Cholecalciferol_mcg).HasMaxLength(50);
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.ToTable("Order");

            entity.Property(e => e.CreditCardExpirationMonth)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreditCardNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DateCompleted).HasColumnType("datetime");
            entity.Property(e => e.DateCreated).HasColumnType("datetime");

            entity.HasOne(d => d.User).WithMany(p => p.Orders)
                .HasForeignKey(d => d.UserID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Order_SiteUser");
        });

        modelBuilder.Entity<OrderDetail>(entity =>
        {
            entity.ToTable("OrderDetail");

            entity.HasOne(d => d.FoodGroup).WithMany(p => p.OrderDetails)
                .HasForeignKey(d => d.FoodGroupID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderDetail_FoodGroup");

            entity.HasOne(d => d.Order).WithMany(p => p.OrderDetails)
                .HasForeignKey(d => d.OrderID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderDetail_Order");
        });

        modelBuilder.Entity<SiteUser>(entity =>
        {
            entity.HasKey(e => e.UserID);

            entity.ToTable("SiteUser");

            entity.Property(e => e.FavoriteFood).HasMaxLength(1000);
            entity.Property(e => e.FavoriteFoodGroup).HasMaxLength(1000);
            entity.Property(e => e.UserName).HasMaxLength(255);
            entity.Property(e => e.UserPassword).HasMaxLength(255);
        });

        modelBuilder.Entity<UnsafeFile>(entity =>
        {
            entity.HasKey(e => e.FileID);

            entity.ToTable("UnsafeFile");

            entity.Property(e => e.FileName).HasMaxLength(255);
        });

        modelBuilder.Entity<UserFile>(entity =>
        {
            entity.HasKey(e => e.FileID);

            entity.ToTable("UserFile");

            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FileExtension).HasMaxLength(10);
            entity.Property(e => e.FileName).HasMaxLength(255);

            entity.HasOne(d => d.User).WithMany(p => p.UserFiles)
                .HasForeignKey(d => d.UserID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserFile_SiteUser");
        });

        modelBuilder.Entity<UserPersonalInformation>(entity =>
        {
            entity.HasKey(e => e.UserID);

            entity.ToTable("UserPersonalInformation");

            entity.Property(e => e.UserID).ValueGeneratedNever();
            entity.Property(e => e.EmailAddress).HasMaxLength(100);
            entity.Property(e => e.FirstName).HasMaxLength(100);
            entity.Property(e => e.LastName).HasMaxLength(100);

            entity.HasOne(d => d.User).WithOne(p => p.UserPersonalInformation)
                .HasForeignKey<UserPersonalInformation>(d => d.UserID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserPersonalInformation_SiteUser");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
